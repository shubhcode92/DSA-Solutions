// Find the minimum path in the grid
// TC - O(N*N)
// SC - O(N*N)

import java.util.* ;
import java.io.*; 
public class Solution {
    public static int minSumPath(int[][] grid) {
    	// Write your code here.
        int row = grid.length;
        int col = grid[0].length;
        int[][] dp = new int[row][col];

        for (int[] x : dp) {
            Arrays.fill(x, -1);
        }
        dp[0][0] = grid[0][0];
        for (int i=1; i<col; i++) {
            dp[0][i] = grid[0][i] + dp[0][i-1];
        }

        for (int i=1; i<row; i++) {
            dp[i][0] = grid[i][0] + dp[i-1][0];
        }

        for (int i=1; i<row; i++) {
            for (int j=1; j<col; j++) {
                dp[i][j] = grid[i][j] + Math.min(dp[i-1][j], dp[i][j-1]);
            }
        }

        // return helper(grid, row-1, col-1, dp);
        return dp[row-1][col-1];
    }

    private static int helper
    (
        int[][] grid, 
        int row, 
        int col, 
        int[][] dp
        
    ) {

        if (row < 0 || col < 0) {
            return Integer.MAX_VALUE;
        }
        if (row == 0 && col == 0) {
            return grid[row][col];
        }

        if (dp[row][col] != -1) {
            return dp[row][col];
        }
        int left = helper(grid, row-1, col, dp);
        int right = helper(grid, row, col-1, dp);

        return dp[row][col] = grid[row][col] + Math.min(left, right);
    }
}
