// This proble is preety famous problem that must know about his description
// that it is the problem about the minimum or a fixed cost that you might get maximum profit.

// I used DP in this solution 
// TC - O(N)
// SC - O(N) + O(N*Cost)


import java.util.* ;
import java.io.*; 

public class Solution{
    static int knapsack(int[] wt, int[] val, int n, int maxWt) {
        int[][] dp = new int[n+1][maxWt+1];

        for (int[] x : dp) {
            Arrays.fill(x, -1);
        }
        return helper(wt, val, n-1, maxWt, dp);
    }

    private static int helper
    (
        int[] wt,
        int[] val,
        int n,
        int maxWt,
        int[][] dp
    ) {
        if (n < 0 || maxWt < 0) {
            return 0;
        }

        if (dp[n][maxWt] != -1) {
            return dp[n][maxWt];
        }

        int notTake = helper(wt, val, n-1, maxWt, dp);
        int take = Integer.MIN_VALUE;
        if (maxWt >= wt[n]) {
            take = val[n] + helper(wt, val, n-1, maxWt-wt[n], dp);
        }

        return dp[n][maxWt] = Math.max(notTake, take);
    }
}


// This is Tabulation Bottom-Up aproach to solve this problem
// TC - O(N*MaxWt]
// SC - O(N*MaxWt]

    static int knapsack(int[] wt, int[] val, int n, int maxWt) {
        int[][] dp = new int[n][maxWt+1];

        for (int i=wt[0]; i<=maxWt; i++) {
            dp[0][i] = val[0];
        }

        for (int i=1; i<n; i++) {
            for (int j=0; j<=maxWt; j++) {
                int notTake = 0 + dp[i-1][j];
                int take = Integer.MIN_VALUE;
                if (j >= wt[i]) {
                    take = val[i] + dp[i-1][j - wt[i]];
                }

                dp[i][j] = Math.max(take, notTake);
            }
        }
        return dp[n-1][maxWt];
    }
